enum Optional<T> {
  None
  Some(T)
}

enum Either<T, U> {
  Left(T)
  Right(U)
}

interface Number<T> {
  operator (T) + (T) -> T

  operator (T) - (T) -> T

  #prec(higher(+))
  operator (T) * (T) -> T

  #prec(equal(*))
  operator (T) / (T) -> T

  let negate : (T) -> T
}


implementation Number<Int> {
  operator x + y { int_add(x, y) }
  operator x - y { int_sub(x, y) }
  operator x * y { int_mul(x, y) }
  operator x / y { int_div(x, y) }
  fn negate(x) { int_neg(x) }
}

interface Printable<T> {
  let to_string : (T) -> String
}

fn print<T: Printable>(x: T) {
  string_print(to_string(x))
}

implementation Printable<String> {
  fn to_string(s) { s }
}

implementation Printable<Int> {
  fn to_string(i) {
    int_to_string(i)
  }
}

// LIST HELPERS
fn map<T, U>(f: (T) -> U, list: List<T>) -> List<U> {
  match list {
    case []: []
    // TODO: replace with value-rest
    case [x, ...rest]: Cons(f(x), map(f, rest))
  }
}

fn reduce<T, U>(f: (U, T) -> U, init: U, list: List<T>) -> U {
  match list {
    case []: init
    case [x, ...rest]:
      let init' = f(init, x)
      reduce(f, init', rest)
  }
}

fn forEach<T>(f: (T) -> Void, list: List<T>) {
  match list {
    case []:
    case [x, ...rest]:
      f(x)
      forEach(f, rest)
  }
}
